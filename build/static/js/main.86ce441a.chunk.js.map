{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","props","myRef","getData","fetch","then","res","json","result","setState","fetching","dataSlide","error","toCardList","list","state","forEach","card","index","push","toTemplateCard","data","scrollText","scroll","console","log","key","style","width","Body","Title","title","Text","textAlign","Img","variant","src","img","ref","className","description","onClick","value","slides","this","onChange","e","target","number","length","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"sUAwBqBA,G,8BAEpB,WAAYC,GAAY,IAAD,8BACpB,4CAAMA,KAFAC,WACc,IAetBC,QAAU,WAERC,MAAM,+DACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACC,EAAKC,SAAS,CACZC,UAAU,EACVC,UAAWH,OAGf,SAACI,GACC,EAAKH,SAAS,CACZC,UAAU,EACVE,cA7BY,EAkCtBC,WAAa,WACX,IAAIC,EAAY,GAIlB,OAHA,EAAKC,MAAMJ,UAAUK,SAAQ,SAACC,EAAMC,GACnCJ,EAAKK,KAAM,EAAKC,eAAeH,EAAMC,OAE/BJ,GAvCe,EAyCtBM,eAAiB,SAACC,EAAeH,GAC/B,IAAII,EAAa,EAAKP,MAAMQ,OAE5B,OADAC,QAAQC,IAAIH,GAEV,kBAAC,IAAD,CAASI,IAAKR,EAAOS,MAAO,CAAEC,MAAO,UACjC,kBAAC,IAAQC,KAAT,KACE,kBAAC,IAAQC,MAAT,KAAgBT,EAAKU,OACrB,kBAAC,IAAQC,KAAT,CAAcL,MAAO,CAACM,UAAW,WAC/B,kBAAC,IAAQC,IAAT,CAAaC,QAAQ,MAAMC,IAAKf,EAAKgB,IAAKV,MAAO,CAACC,MAAO,YAE3D,kBAAC,IAAQI,KAAT,CAAeM,IAAK,EAAKpC,MAAOqC,UAAYjB,EAAc,iBAAmB,QAC1ED,EAAKmB,aAER,uBAAGD,UAAYjB,EAAc,mBAAqB,WAClD,kBAAC,IAAD,CAAWa,QAAQ,oBAAoBM,QAAS,kBAAM,EAAKhC,SAAS,CAACc,QAASD,MAC1EA,EAAc,mDAAa,mEAtDzC,EAAKP,MAAQ,CACT2B,MAAO,EACPhC,UAAU,EACViC,OAAQ,GACRhC,UAAW,GACXC,MAAO,KACPW,QAAQ,GARU,E,iFAYpBqB,KAAKzC,Y,+BAmDE,IAAD,OACR,OACI,kBAAC,IAAD,KACE,kBAAC,IAAD,KACI,kBAAC,IAAD,KACE,kBAAC,IAAD,CACAuC,MAAOE,KAAK7B,MAAM2B,MAClBC,OAAQC,KAAK/B,aACbgC,SAAU,SAACC,GAAD,OAAW,EAAKrC,SAAS,CAAEiC,MAAOI,EAAEC,OAASD,EAAEC,OAAOL,MAAQI,OAExE,kBAAC,OAAD,CAAMJ,MAAOE,KAAK7B,MAAM2B,MAAOG,SAAU,SAACC,GAAD,OAAW,EAAKrC,SAAS,CAAEiC,MAAOI,EAAEC,OAASD,EAAEC,OAAOL,MAAQI,KAAME,OAAQJ,KAAK/B,aAAaoC,gB,GA3EpHC,IAAMC,YCZnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1D,MAAK,SAAA2D,GACJA,EAAaC,gBAEdC,OAAM,SAAAtD,GACLY,QAAQZ,MAAMA,EAAMuD,c","file":"static/js/main.86ce441a.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport * as RB from 'react-bootstrap'\n\nimport Carousel, { Dots } from '@brainhubeu/react-carousel';\nimport '@brainhubeu/react-carousel/lib/style.css';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n//import { apiFetch } from './function'\n\ntype jsonData = {\n  id: number,\n  title: string,\n  description: string,\n  img: string\n}\ntype AppState = {\n  value: number,\n  fetching: boolean,\n  slides: any [],\n  dataSlide: jsonData [],\n  error: any,\n  scroll: boolean\n}\nexport default class App extends React.Component<{}, AppState> {\n  private myRef: any;\n\tconstructor(props: {}) {\n    super(props)\n\t\tthis.state = {    \n      value: 0,\n      fetching: false,\n      slides: [],\n      dataSlide: [],\n      error: null,\n      scroll: false\n    }\n  }\n  componentDidMount() {\n    this.getData();\n    //this.toCardList();\n\t}\n  getData = () => {\n    //fetch(\"https://app.fakejson.com/q/W5NF5n0d?token=NZNDuadWK4Fe9NO0_c28Mg\")\n    fetch(\"https://ekaterinabelonosova.github.io/slider/json/json.json\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            fetching: true,\n            dataSlide: result\n          });\n        },\n        (error) => {\n          this.setState({\n            fetching: true,\n            error\n          });\n        }\n      )\t\n  }\n  toCardList = () => {\n    let list: any = []\n\t\tthis.state.dataSlide.forEach((card, index) => {\t\n\t\t\tlist.push((this.toTemplateCard(card, index)))\t\t\t\n    });\n\t\treturn list;\n  }\n  toTemplateCard = (data:jsonData, index:number) => {\n    var scrollText = this.state.scroll;\n    console.log(scrollText);\n    return (\n      <RB.Card key={index} style={{ width: '90rem' }}>\n          <RB.Card.Body>\n            <RB.Card.Title>{data.title}</RB.Card.Title>\n            <RB.Card.Text style={{textAlign: \"center\"}}>\n              <RB.Card.Img variant=\"top\" src={data.img} style={{width: \"100px\"}}/>\n            </RB.Card.Text>\n            <RB.Card.Text  ref={this.myRef} className={(scrollText) ? \"text text-open\" : \"text\"}>\n              {data.description}\n            </RB.Card.Text>\n            <p className={(scrollText) ? \"text-open toggle\" : \"toggle\"}></p>\n            <RB.Button variant=\"outline-secondary\" onClick={() => this.setState({scroll: !scrollText})}>\n              {(scrollText) ? \"Свернуть\" : \"Развернуть\"}\n            </RB.Button> \n          </RB.Card.Body> \n                 \n      </RB.Card>\n    )\n  }\n\trender() {\n\t\treturn (\n      <RB.Container>\n        <RB.Row>\n            <RB.Col>\n              <Carousel\n              value={this.state.value}\n              slides={this.toCardList()}\n              onChange={(e:any) => this.setState({ value: e.target ? e.target.value : e })}\n              />\n              <Dots value={this.state.value} onChange={(e:any) => this.setState({ value: e.target ? e.target.value : e })} number={this.toCardList().length} />\n            </RB.Col>            \n        </RB.Row>\n      </RB.Container>\n\t\t)\n\t}\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}